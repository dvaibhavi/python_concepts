



'''
1 -> 2 -> 3


class SingleLinkedList() :

    def __init__(self,node):
        self.node = [node]

    def set_next(self, new_node):
        self.node.next =  new_node
        
class Node:

    def __init__(self, data, ptr):
        self.__data = data 
        self.__next = ptr

    


def create_linked_list(array):  #5 -> 6
    # create link list from array
    n = len(arr) # 1

    if n == 1:
        l1 = SingleLinkedList(Node(arr[0], None)) # 5
        return l1
    

    #temp = arr[0]
    head = l1
    for i in range(n):
        
        

        l1.append(Node(array[i], None))
   

    return l1

'''

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def add_to_linked_list(head, val):
    # Create a new node
    new_node = ListNode(val)

    # If the linked list is empty, set the head to the new node
    if head is None:
        head = new_node
        return head

    # Traverse the linked list to find the last node
    current_node = head
    while current_node.next is not None:
        current_node = current_node.next

    # Set the next pointer of the last node to the new node
    current_node.next = new_node

    return head


# Create the first linked list
head1 = ListNode(1)
head1.next = ListNode(2)
head1.next.next = ListNode(3)

# Create the second linked list
head2 = ListNode(4)
head2.next = ListNode(5)
head2.next.next = ListNode(6)

# Insert data into the first linked list
head1 = add_to_linked_list(head1, 4)
head1 = add_to_linked_list(head1, 5)

# Insert data into the second linked list
head2 = add_to_linked_list(head2, 7)
head2 = add_to_linked_list(head2, 8)

print(head1, head2)


class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None
    
    def print_list(self):
        curr_node = self.head
        while curr_node:
            print(curr_node.data, end=" -> ")
            curr_node = curr_node.next
        print("None")
    
    def add_node(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            return
        last_node = self.head
        while last_node.next:
            last_node = last_node.next
        last_node.next = new_node

def union(list1, list2):
    seen = set()
    result = LinkedList()
    curr_node = list1.head
    while curr_node:
        if curr_node.data not in seen:
            seen.add(curr_node.data)
            result.add_node(curr_node.data)
        curr_node = curr_node.next
    curr_node = list2.head
    while curr_node:
        if curr_node.data not in seen:
            seen.add(curr_node.data)
            result.add_node(curr_node.data)
        curr_node = curr_node.next
    return result

# example usage
list1 = LinkedList()
list1.add_node(1)
list1.add_node(2)
list1.add_node(3)

list2 = LinkedList()
list2.add_node(2)
list2.add_node(3)
list2.add_node(4)

union_list = union(list1, list2)
union_list.print_list()  # Output: 1 -> 2 -> 3 -> 4 -> None


    


